---
x-docker-logging: &docker-logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"  # 로그 파일의 최대 크기 (10MB)
      max-file: "20"  # 유지할 로그 파일 개수 (최대 10개)

x-spark-common: &spark-common
  <<: *docker-logging
  build: spark/dockerfile.d
  env_file: ./.env
  volumes:
    - ./spark_logs:/opt/spark/logs
    - ./spark_events:/opt/spark/events
  entrypoint: ["bash", "-c"]
  platform: linux/amd64
  user: "0"

services:
  hive-metastore:
    <<: *docker-logging
    build: hive/dockerfile.d
    environment:
      DB_DRIVER: mysql
      SERVICE_NAME: metastore
      SERVICE_OPTS: >-
        -Djavax.jdo.option.ConnectionDriverName=com.mysql.cj.jdbc.Driver
        -Djavax.jdo.option.ConnectionURL=jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${HIVE_DATABASE}
        -Djavax.jdo.option.ConnectionUserName=${MYSQL_USER}
        -Djavax.jdo.option.ConnectionPassword=${MYSQL_PASSWORD}
    ports:
      - 9083:9083
    depends_on:
      - mysql

  spark-master:
    <<: *spark-common
    container_name: "${container_name:-spark-master}"
    command:
      - |
        /opt/spark/sbin/start-master.sh && \
        /opt/spark/sbin/start-thriftserver.sh \
        --master spark://spark-master:7077 && \
        /opt/spark/sbin/start-history-server.sh && \
        tail -f a /opt/spark/logs/*.out
    ports:
      - 4040:4040
      - 4041:4041
      - 7077:7077
      - 8080:8080
      - 10000:10000
      - 18080:18080

  spark-worker:
    <<: *spark-common
    container_name: "${container_name:-spark-worker}"
    command:
      - |
        /opt/spark/sbin/start-worker.sh spark://spark-master:7077 && \
        tail -f a /opt/spark/logs/*.out
    environment:
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_PORT=7080
      - SPARK_WORKER_OPTS="-Dspark.worker.cleanup.enabled=true"
    ports:
      - 8081:8081

  mysql:
    image: mysql:${MYSQL_VERSION:-8.0.41}
    volumes:
      - ./mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_PASSWORD}"
      MYSQL_DATABASE: "${HIVE_DATABASE}"
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p$$MYSQL_ROOT_PASSWORD",
        ]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  minio:
    build: minio/dockerfile.d
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      retries: 5
      start_period: 5s
    volumes:
      - ./data:/data
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin1234
